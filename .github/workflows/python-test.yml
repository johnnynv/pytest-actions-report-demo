name: Python CI with Native Email Notifications

on:
  pull_request: {}
  push:
    branches: [ main, release/* ]

permissions:
  checks: write
  contents: read
  pull-requests: write
  statuses: write
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-html pytest-cov
    - name: Run tests and record results
      id: run-tests
      run: |
        cd tests
        # Capture raw test output
        TEST_OUTPUT=$(PYTHONPATH=../src pytest \
          --cov=../src \
          --cov-report=xml:../coverage-${{ matrix.python-version }}.xml \
          --junitxml=../test-results-${{ matrix.python-version }}.xml \
          --html=../report-${{ matrix.python-version }}.html \
          --self-contained-html 2>&1)

        # Save raw output
        echo "TEST_OUTPUT<<EOF" >> $GITHUB_ENV
        echo "$TEST_OUTPUT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        # Parse test results
        passed=$(xmllint --xpath 'count(//testcase[not(skipped) and not(failure) and not(error)])' ../test-results-${{ matrix.python-version }}.xml || echo "0")
        failures=$(xmllint --xpath 'count(//testcase[failure])' ../test-results-${{ matrix.python-version }}.xml || echo "0")
        errors=$(xmllint --xpath 'count(//testcase[error])' ../test-results-${{ matrix.python-version }}.xml || echo "0")
        skipped=$(xmllint --xpath 'count(//testcase[skipped])' ../test-results-${{ matrix.python-version }}.xml || echo "0")
        xfailed=$(xmllint --xpath 'count(//testcase[contains(@name, "[xfail]")])' ../test-results-${{ matrix.python-version }}.xml || echo "0")
        xpassed=$(xmllint --xpath 'count(//testcase[contains(@name, "[xpass]")])' ../test-results-${{ matrix.python-version }}.xml || echo "0")
        actual_passed=$((passed - xpassed))
        # Output to job summary
        echo "### 📊 Python ${{ matrix.python-version }} Detailed Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "$TEST_OUTPUT" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

        echo "### 🔍 Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| ✅ Passed | $actual_passed |" >> $GITHUB_STEP_SUMMARY
        echo "| ❌ Failed | $failures |" >> $GITHUB_STEP_SUMMARY
        echo "| ⏩ Skipped | $skipped |" >> $GITHUB_STEP_SUMMARY
        echo "| 💥 Errors | $errors |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔶 XFailed | $xfailed |" >> $GITHUB_STEP_SUMMARY
        echo "| ⚠️ XPassed | $xpassed |" >> $GITHUB_STEP_SUMMARY
        # Set outputs
        echo "passed=$actual_passed" >> $GITHUB_OUTPUT
        echo "failed=$failures" >> $GITHUB_OUTPUT
        echo "skipped=$skipped" >> $GITHUB_OUTPUT
        echo "errors=$errors" >> $GITHUB_OUTPUT
        echo "xfailed=$xfailed" >> $GITHUB_OUTPUT
        echo "xpassed=$xpassed" >> $GITHUB_OUTPUT
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          report-${{ matrix.python-version }}.html
          coverage-${{ matrix.python-version }}.xml
          test-results-${{ matrix.python-version }}.xml
    outputs:
      passed: ${{ steps.run-tests.outputs.passed }}
      failed: ${{ steps.run-tests.outputs.failed }}
      skipped: ${{ steps.run-tests.outputs.skipped }}
      errors: ${{ steps.run-tests.outputs.errors }}
      xfailed: ${{ steps.run-tests.outputs.xfailed }}
      xpassed: ${{ steps.run-tests.outputs.xpassed }}

  summary:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Generate final report
        run: |
          # Prepare data
          echo "### 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Python Version | ✅ Passed | ❌ Failed | ⏩ Skipped | 💥 Errors | 🔶 XFailed | ⚠️ XPassed |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|----------|----------|-----------|----------|----------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 3.8 | ${{ needs.test.outputs.passed }} | ${{ needs.test.outputs.failed }} | ${{ needs.test.outputs.skipped }} | ${{ needs.test.outputs.errors }} | ${{ needs.test.outputs.xfailed }} | ${{ needs.test.outputs.xpassed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 3.9 | ${{ needs.test.outputs.passed }} | ${{ needs.test.outputs.failed }} | ${{ needs.test.outputs.skipped }} | ${{ needs.test.outputs.errors }} | ${{ needs.test.outputs.xfailed }} | ${{ needs.test.outputs.xpassed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 3.10 | ${{ needs.test.outputs.passed }} | ${{ needs.test.outputs.failed }} | ${{ needs.test.outputs.skipped }} | ${{ needs.test.outputs.errors }} | ${{ needs.test.outputs.xfailed }} | ${{ needs.test.outputs.xpassed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 3.11 | ${{ needs.test.outputs.passed }} | ${{ needs.test.outputs.failed }} | ${{ needs.test.outputs.skipped }} | ${{ needs.test.outputs.errors }} | ${{ needs.test.outputs.xfailed }} | ${{ needs.test.outputs.xpassed }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 [View Detailed Reports]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> $GITHUB_STEP_SUMMARY
          # Save summary for notification
          echo "FINAL_SUMMARY<<EOF" >> $GITHUB_ENV
          cat $GITHUB_STEP_SUMMARY >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send notification
        uses: actions/github-script@v6
        if: always()  # Send even if tests fail
        env:
          SUMMARY: ${{ env.FINAL_SUMMARY }}
        with:
          script: |
            // Determine overall status
            const totalFailed = parseInt('${{ needs.test.outputs.failed }}');
            const totalErrors = parseInt('${{ needs.test.outputs.errors }}');
            const status = (totalFailed > 0 || totalErrors > 0) ? 'FAILED ❌' : 'PASSED ✅';
            const emoji = (totalFailed > 0 || totalErrors > 0) ? '🔴' : '🟢';
            // Create PR comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
              ${emoji} **CI Test Results** ${emoji}
              **Status:** ${status}
              **Triggered by:** @${{ github.actor }}
              **Branch:** ${{ github.ref }}
              ### 📊 Summary
              ${{ env.SUMMARY }}
              [View full report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `
            });
            // Update commit status to trigger GitHub's native email
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.pull_request.head.sha }}',
              state: (totalFailed > 0 || totalErrors > 0) ? 'failure' : 'success',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: `Tests ${status}`,
              context: 'CI/Tests'
            });
